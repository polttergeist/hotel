require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/reviews", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Review. As you add validations to Review, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: Faker::Name.name,
      email: Faker::Internet.email,
      comment: Faker::Lorem.sentence
    }
  }

  let(:invalid_attributes) {
    {
      name: "",
      email: "",
      comment: ""
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Review.create! valid_attributes
      get reviews_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Review" do
        expect {
          post reviews_url, params: { review: valid_attributes }
        }.to change(Review, :count).by(1)
      end

      it "redirects to the same page" do
        post reviews_url, params: { review: valid_attributes }
        expect(response).to redirect_to(reviews_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Review" do
        expect {
          post reviews_url, params: { review: invalid_attributes }
        }.to change(Review, :count).by(0)
      end
    end
  end
end
